#include "../hashtable/hashtable.h"
#include "../job_scheduler/JobScheduler.h"


#test ht
    Hashtable* ht = createHashTable();
    init_TopK();


    char word[50]="just a line";
    insertHashTable(ht, word, 1);
    
    memset(word,0,50);
    strncpy(word,"just not a line", strlen("just not a line"));
    insertHashTable(ht, word, 1);

    memset(word,0,50);
    strncpy(word,"line", strlen("line"));
    insertHashTable(ht, word, 1);

    memset(word,0,50);
    strncpy(word,"line is", strlen("line is"));
    insertHashTable(ht, word, 1);

    memset(word,0,50);
    strncpy(word,"a a a a ", strlen("a a a a "));
    insertHashTable(ht, word, 1);

    char *result;

    memset(word,0,50);
    strncpy(word,"just not a line", strlen("just not a line"));
    Argument *arg =create_Argument(ht, word, strlen(word), 1, 0);
    result = FindHashTable((void*)arg, 1);
    ck_assert_msg(strcmp(result, "just not a line|line")==0, "failed_01");
    free(result);

    memset(word,0,50);
    strncpy(word,"just", strlen("just"));
    arg =create_Argument(ht, word, strlen(word), 1, 0);
    result = FindHashTable((void*)arg, 1);
    ck_assert_msg(strcmp(result, "-1")==0, "failed_02");
    free(result);

    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    insertHashTable(ht, word, 1);

    memset(word,0,50);
    strncpy(word,"hello", strlen("hello"));
    insertHashTable(ht, word, 1);

    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    arg =create_Argument(ht, word, strlen(word), 1, 0);
    result = FindHashTable((void*)arg, 1);
    ck_assert_msg(strcmp(result, "hello|hello world")==0, "failed_03");
    free(result);

    memset(word,0,50);
    strncpy(word,"just a line hello world", strlen("just a line hello world"));
    arg =create_Argument(ht, word, strlen(word), 1, 0);
    result = FindHashTable((void*)arg, 1);
    ck_assert_msg(strcmp(result, "just a line|line|hello|hello world")==0, "failed_04");
    free(result);

    memset(word,0,50);
    strncpy(word,"hello", strlen("hello"));
    ck_assert_msg(deleteHashTable(ht, word)==1, "failed_05");

    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    arg =create_Argument(ht, word, strlen(word), 1, 0);
    result = FindHashTable((void*)arg, 1);
    ck_assert_msg(strcmp(result, "hello world")==0, "failed_06");
    free(result);

    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    ck_assert_msg(deleteHashTable(ht, word)==1, "failed_07");

    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    arg =create_Argument(ht, word, strlen(word), 1, 0);
    result = FindHashTable((void*)arg, 1);
    ck_assert_msg(strcmp(result, "-1")==0, "failed_08");
    free(result);

    memset(word,0,50);
    strncpy(word,"hello", strlen("hello"));
    insertHashTable(ht, word, 1);

    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    arg =create_Argument(ht, word, strlen(word), 1, 0);
    result = FindHashTable((void*)arg, 1);
    ck_assert_msg(strcmp(result, "hello")==0, "failed_09");
    free(result);

    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    insertHashTable(ht, word, 1);

    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    arg =create_Argument(ht, word, strlen(word), 1, 0);
    result = FindHashTable((void*)arg, 1);
    ck_assert_msg(strcmp(result, "hello|hello world")==0, "failed_010");
    free(result);


    calculate_TopK(3);
    destroy_TopK();
     destroyHashTable(ht);





#test bf
    BloomFilter bf = BF_Init(10);
    char word[50]="just a line";
    bool exist;
    exist=BF_Lookup( &bf, word);
    ck_assert_msg(exist==0, "failed_10");

    exist=BF_Lookup( &bf, word);
    ck_assert_msg(exist==1, "failed_11");

    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    exist=BF_Lookup( &bf, word);
    ck_assert_msg(exist==0, "failed_12");

    exist=BF_Lookup( &bf, word);
    ck_assert_msg(exist==1, "failed_13");

    memset(word,0,50);
    strncpy(word,"new str", strlen("new str"));
    exist=BF_Lookup( &bf, word);
    ck_assert_msg(exist==0, "failed_12");

    exist=BF_Lookup( &bf, word);
    ck_assert_msg(exist==1, "failed_13");






#test staticTrie
    Hashtable* ht2 = createHashTable();
    init_TopK();

    char word[50]="just a line";
    insertHashTable(ht2, word, 1);

    memset(word,0,50);
    strncpy(word,"just not a line", strlen("just not a line"));
    insertHashTable(ht2, word, 1);

    memset(word,0,50);
    strncpy(word,"line", strlen("line"));
    insertHashTable(ht2, word, 1);

    memset(word,0,50);
    strncpy(word,"line is", strlen("line is"));
    insertHashTable(ht2, word, 1);

    memset(word,0,50);
    strncpy(word,"a a a a ", strlen("a a a a "));
    insertHashTable(ht2, word, 1);

    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    insertHashTable(ht2, word, 1);

    memset(word,0,50);
    strncpy(word,"hello", strlen("hello"));
    insertHashTable(ht2, word, 1);

    Compress(ht2);
    char *result;

    memset(word,0,50);
    strncpy(word,"just not a line", strlen("just not a line"));
    Argument *arg =create_Argument(ht2, word, strlen(word), 1, 1);
    result = FindHashTable((void*)arg, 1);
    ck_assert_msg(strcmp(result, "just not a line|line")==0, "failed_21");
    free(result);

    memset(word,0,50);
    strncpy(word,"just", strlen("just"));
    arg =create_Argument(ht2, word, strlen(word), 1, 1);
    result = FindHashTable((void*)arg, 1);
    ck_assert_msg(strcmp(result, "-1")==0, "failed_22");
    free(result);
    
    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    arg =create_Argument(ht2, word, strlen(word), 1, 1);
    result = FindHashTable((void*)arg, 1);
    ck_assert_msg(strcmp(result, "hello|hello world")==0, "failed_23");
    free(result);

    memset(word,0,50);
    strncpy(word,"just a line hello world", strlen("just a line hello world"));
    arg =create_Argument(ht2, word, strlen(word), 1, 1);
    result = FindHashTable((void*)arg, 1);
    ck_assert_msg(strcmp(result, "just a line|line|hello|hello world")==0, "failed_24");
    free(result);

    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    arg =create_Argument(ht2, word, strlen(word), 1, 1);
    result = FindHashTable((void*)arg, 1);
    ck_assert_msg(strcmp(result, "hello|hello world")==0, "failed_28");
    free(result);



    calculate_TopK(3);
    destroy_TopK();
    destroyHashTable(ht2);






#test stack
    Stack* stack=createStack();
    trie_node node=trieNode_Init("test", strlen("test"),1);
    trie_node *node_ptr=&node;
    ck_assert_msg(pushStack(stack, node_ptr, 0)==1, "failed_41");
    stack_node sn=popStack(stack );
    ck_assert_msg(sn.kid_pos==0, "failed_42");
    ck_assert_msg(strcmp(sn.tnode->word_2,"test")==0, "failed_43");
    ck_assert_msg(isEmpty_Stack(stack)==1, "failed_44");
    destroyStack(stack);




#test JS
 JobScheduler* JS= initialize_scheduler(5);
    Hashtable* ht = createHashTable();
    init_TopK();
   

    char word[50]="just a line";
    insertHashTable(ht, word, 1);
    
    memset(word,0,50);
    strncpy(word,"just not a line", strlen("just not a line"));
    insertHashTable(ht, word, 1);

    memset(word,0,50);
    strncpy(word,"line", strlen("line"));
    insertHashTable(ht, word, 1);

    memset(word,0,50);
    strncpy(word,"line is", strlen("line is"));
    insertHashTable(ht, word, 1);

    memset(word,0,50);
    strncpy(word,"a a a a ", strlen("a a a a "));
    insertHashTable(ht, word, 1);


    memset(word,0,50);
    strncpy(word,"just not a line", strlen("just not a line"));
    Argument *arg =create_Argument(ht, word, strlen(word), 1, 0);
    Job *job1 = create_Job((void*)FindHashTable, (void*)arg, 1);
    submit_job(JS, job1);   

    memset(word,0,50);
    strncpy(word,"just", strlen("just"));
    arg =create_Argument(ht, word, strlen(word), 1, 0);
    job1 = create_Job((void*)FindHashTable, (void*)arg, 2);
    submit_job(JS, job1);

    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    insertHashTable(ht, word, 2);

    memset(word,0,50);
    strncpy(word,"hello", strlen("hello"));
    insertHashTable(ht, word, 2);

    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    arg =create_Argument(ht, word, strlen(word), 2, 0);
    job1 = create_Job((void*)FindHashTable, (void*)arg, 3);
    submit_job(JS, job1);

    memset(word,0,50);
    strncpy(word,"just a line hello world", strlen("just a line hello world"));
    arg =create_Argument(ht, word, strlen(word), 2, 0);
    job1 = create_Job((void*)FindHashTable, (void*)arg, 4);
    submit_job(JS, job1);


    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    arg =create_Argument(ht, word, strlen(word), 2, 0);
    job1 = create_Job((void*)FindHashTable, (void*)arg, 5);
    submit_job(JS, job1);


    memset(word,0,50);
    strncpy(word,"hello world", strlen("hello world"));
    arg =create_Argument(ht, word, strlen(word), 2, 0);
    job1 = create_Job((void*)FindHashTable, (void*)arg, 6);
    submit_job(JS, job1);

    execute_all_jobs(JS);
    wait_all_tasks_finish(JS);  
    int i;
    for(i=0;i<JS->results.size; i++){
        printf("%s\n",JS->results.array[i]);
        free(JS->results.array[i]);
    }

    destroy_JobScheduler(JS);
    destroy_TopK();
    destroyHashTable(ht);
                    
